#include <SPI.h> // Подключаем библиотеку для работы с шиной SPI.
#include <nRF24L01.h> // Подключаем файл настроек из библиотеки RF24.
#include <RF24.h> // Подключаем библиотеку для работы с nRF24L01+.
#include <Servo.h>
RF24 radio(7, 10); // Создаём объект radio (CE, SS).
int myData[3]; // Объявл.массив для приёма и хран.данных (до 32 байт)

 //подготовка сервомотора
 Servo myservoriskanie;
 Servo myservotangaj;
 Servo myservokrena; 
 int pos = 90; 

 //подготовка ультразвукового датчика 
const int trigPin1 = 12; 
const int trigPin2 = 8; 
const int echoPin1 = 4; 
const int echoPin2 = 2; 

//distance to start tracking for ultrasonic 
int t_distance = 100; //in cm 
int distance1;int distance2; 
const int NUM_READ = 3;  

 //
void setup(){ //
 Serial.begin(9600);
 while(!Serial){} // Ждём готовность Serial к передаче данных в Serial()
 // MSS.servoSet(0, SERVO_SG90); // Сервопривод SG90 подключён к выводу № 0 MultiServoShield.
 // MSS.begin();
 radio.begin(); // Инициируем работу nRF24L01+
 radio.setChannel (70); // Указываем канал передачи данных (от 0 до 125), 27 - значит передача данных осуществляется на частоте 2,427 ГГц.
 radio.setDataRate (RF24_2MBPS); // Указываем скорость передачи данных (RF24_250KBPS, RF24_1MBPS, RF24_2MBPS), RF24_1MBPS - 1Мбит/сек.
 radio.setPALevel (RF24_PA_MAX); // Указываем мощность передатчика (RF24_PA_MIN=-18dBm, RF24_PA_LOW=-12dBm, RF24_PA_HIGH=-6dBm, RF24_PA_MAX=0dBm).
 radio.enableAckPayload(); // Указываем что в пакетах подтверждения приёма есть блок с пользовательскими данными.
// radio.enableDynamicPayloads(); // Разрешить динамически изменяемый размер блока данных на всех трубах.
 radio.openReadingPipe (1, 0xAABBCCDD11LL); // Открываем 1 трубу с адресом 0xAABBCCDD11, для приема данных.
 radio.startListening (); // Включаем приемник, начинаем прослушивать открытые трубы.
//radio.writeAckPayload (1, &ackData, sizeof(ackData) ); // Помещаем данные всего массива ackData в буфер FIFO. Как только будут получены любые данные от передатчика на 1 трубе, то данные из буфера FIFO будут отправлены этому передатчику вместе с пакетом подтверждения приёма его данных.
myservoriskanie.attach(11);
myservotangaj.attach(5);
myservokrena.attach(6);
myservoriskanie.write(90);
myservotangaj.write(90);
myservokrena.write(85);

//ultrasonic setup
 pinMode(trigPin1, OUTPUT);
 pinMode(trigPin2, OUTPUT);
 pinMode(echoPin1, INPUT);
 pinMode(echoPin2, INPUT);

} // В модуле имеется 3 буфера FIFO, значит в них одновременно может находиться до трёх разных или одинаковых данных для ответа по одной или разным трубам.
 // После отправки данных из буфера FIFO к передатчику, соответствующий буфер очищается и способен принять новые данные для отправки.
void loop(){ //
// Заранее готовим данные для отправки назад (передатчику)

 
 if(radio.available()){ // Если в буфере приёма есть принятые данные от передатчика, то ...
 radio.read ( &myData, sizeof(myData) ); // Читаем данные из буфера приёма в массив myData указывая сколько всего байт может поместиться в массив.
 }//radio.writeAckPayload (1, &ackData, sizeof(ackData) ); // Помещаем данные всего массива ackData в буфер FIFO для их отправки на следующее получение данных от передатчика на 1 трубе.
  // Если все 3 буфера FIFO уже заполнены, то функция writeAckPayload() будет проигнорирована.
 // MSS.servoWrite(0, myData[0]);
  /*//Left sensor
 	digitalWrite(trigPin2, LOW);  
	delayMicroseconds(2);  
  
	digitalWrite(trigPin2, HIGH);  
	delayMicroseconds(5);  
  
	digitalWrite(trigPin2, LOW);  
  
  	int duration = pulseIn(echoPin2, HIGH); 
    runMiddleArifmOptim(duration);
  
  //Right sensor
  	digitalWrite(trigPin1, LOW);  
	delay(10);  
  
	digitalWrite(trigPin1, HIGH);  
	delay(20);  
  
	digitalWrite(trigPin1, LOW);  
  
  	int duration2 = pulseIn(echoPin1, HIGH);
    runMiddleArifmOptim(duration2); 

    //calculate distance based on duration of each sensor 
  
  	distance1 = (duration2*.0343)/2; 
    distance1 = constrain(distance1, 5, 300); 
  	distance2 = (duration*.0343)/2;
    distance2 = constrain(distance2, 5, 300); 
    //int diff = distance1 - distance2;
    //int teleng = pos+diff; 

    follow(); */


int tunduk = constrain(myData[0],-60,60);
int teleng = constrain(myData[1],-60,60); 
int tundukplat = map(tunduk,-60,60,120,60);
int telengplat = map(teleng,-60,60,60,120); 

myservotangaj.write(tundukplat);
myservokrena.write(telengplat); 

// Выводим в Serial то, что пришло от передатчика:
// ДЛЯ УСКОРЕНИЯ РАБОТЫ ВСЕЙ СИСТЕМЫ В ОКОНЧАТ.ВЕРСИИ ЗАКОММЕНТИРОВАТЬ ВСЕ Serial.print(..)
 Serial.print("mDa[0]="); Serial.print('\t'); Serial.print(myData[0]); Serial.print('\t');
 Serial.print("mDa[1]="); Serial.print('\t'); Serial.print(myData[1]); Serial.print('\t');
 Serial.print("mDa[2]="); Serial.print('\t'); Serial.print(myData[2]); Serial.print('\t');
 Serial.println();
 
}
/*
//оптимальное бегущее среднее арифметическое 
float runMiddleArifmOptim(float newVal) {
  static int t = 0;
  static float vals[NUM_READ];
  static float average = 0;
  if (++t >= NUM_READ) t = 0; // перемотка t
  average -= vals[t];         // вычитаем старое
  average += newVal;          // прибавляем новое
  vals[t] = newVal;           // запоминаем в массив
  return ((float)average / NUM_READ);
}

void follow()
{
  if (distance1 <= t_distance || distance2 <= t_distance)
  {
    if (distance1 + 5 < distance2){ pos = pos -3; }
    if (distance2 + 5 < distance1) { pos = pos +3; }
  }
  if (pos > 180)
  {
    pos = 180; 
  }
  if (pos < 0) 
  {
    pos = 0; 
  }
  myservoriskanie.write(pos); 
}*/