#include <Wire.h>
//#include <SFE_BMP180.h>
#include <MPU6050_light.h>
#include "SPI.h"
#include "NRFLite.h"
//const int trigPin = 10;
//const int echoPin = 11;

MPU6050 mpu(Wire);
unsigned long timer = 0;

NRFLite _radio; 
uint8_t _data; 

//SFE_BMP180 bmp180;
//float Po = 1008.12;  //base pressure, make sure test on ground before running program!

void setup() {
  //pinMode(trigPin, OUTPUT);
  //pinMode(echoPin, INPUT);
  Serial.begin(9600);
  Wire.begin();

  _radio.init(1,7,10)

  //bool success = bmp180.begin();

  /*if (success) {
    Serial.println("BMP180 init success");
  }*/


  byte situasi = mpu.begin();
  Serial.print(F("MPU6050 status: "));
  Serial.println(situasi);
  while (situasi != 0) {}

  Serial.println(F("Calculating offsets, do not move MPU6050"));
  delay(1000);
  // mpu.upsideDownMounting = true; // uncomment this line if the MPU6050 is mounted upside-down
  mpu.calcOffsets();  // gyro and accelero
  Serial.println("Done!\n");
}

void loop() {
  /*char status;
  double T, P, alt;
  bool success = false;

  status = bmp180.startTemperature();*/
  mpu.update();

  /*if (status != 0) {
    delay(1000);
    status = bmp180.getTemperature(T);

    if (status != 0) {
      status = bmp180.startPressure(3);

      if (status != 0) {
        delay(status);
        status = bmp180.getPressure(P, T);

        if (status != 0) {
          alt = bmp180.altitude(P, Po);*/

          if ((millis() - timer) > 10) {  // print data every 10ms
            Serial.print("X : ");
            Serial.print(mpu.getAngleX());
            Serial.print("\tY : ");
            Serial.print(mpu.getAngleY());
            Serial.print("\tZ : ");
            Serial.println(mpu.getAngleZ());
            timer = millis();
          }
          //Serial.print("Altitude: ");
          //Serial.print(alt);  //change alt to P to get the base pressure, astu jangan lupa tukar balik!
          //Serial.println(" Meters");

          //continue here for additional coding
          /*digitalWrite(trigPin, LOW);
          delay(10);
          digitalWrite(trigPin, HIGH);
          delay(20);
          digitalWrite(trigPin, LOW);
          int duration = pulseIn(echoPin, HIGH);
          int distance = (duration * .0343) / 2;
          Serial.print("Distance: "); Serial.println(distance);*/
          
        }
      //}
    //}
  //}
//}